{"version":3,"sources":["containers/Righteous-Regular.ttf","components/Card.js","components/Cardlist.js","components/searchbox.js","containers/app.js","serviceWorker.js","index.js"],"names":["module","exports","Card","name","id","email","className","src","alt","Cardlist","robots","map","user","i","key","Searchbox","makeChanges","type","onChange","App","e","setState","searchfilter","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robo","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kOAAAA,EAAOC,QAAU,IAA0B,+C,mHCe5BC,G,MAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACxB,OACE,kBAAC,WAAD,KACE,yBAAKC,UAAU,cACb,yBAAKC,IAAG,+BAA0BH,GAAMI,IAAI,WAC5C,4BAAKL,GACL,2BAAIE,OCcGI,G,MAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,kBAAC,WAAD,KACE,yBAAKJ,UAAU,gBACZI,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKJ,EAAOG,GAAGT,GACfA,GAAIM,EAAOG,GAAGT,GACdD,KAAMO,EAAOG,GAAGV,KAChBE,MAAOK,EAAOG,GAAGR,eCHhBU,G,YARG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACnB,OACE,kBAAC,WAAD,KACE,2BAAOC,KAAK,SAASC,SAAUF,OCwCtBG,G,kBAvCb,aAAe,IAAD,8BACZ,+CAaFH,YAAc,SAAAI,GACZ,EAAKC,SAAS,CAAEC,aAAcF,EAAEG,OAAOC,SAbvC,EAAKC,MAAQ,CACXf,OAAQ,GACRY,aAAc,IAJJ,E,iFAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEX,OAAQoB,S,+BAMjC,IAAD,EAC0BC,KAAKN,MAA9Bf,EADD,EACCA,OAAQY,EADT,EACSA,aACVU,EAAiBtB,EAAOuB,QAAO,SAAAC,GACnC,OAAOA,EAAK/B,KAAKgC,cAAcC,SAASd,EAAaa,kBAEvD,OAAQzB,EAAO2B,OAMb,kBAAC,WAAD,KACE,yBAAK/B,UAAU,WACb,2DACA,kBAAC,EAAD,CAAWU,YAAae,KAAKf,eAE/B,kBAAC,EAAD,CAAUN,OAAQsB,KAVpB,kBAAC,WAAD,KACE,wBAAI1B,UAAU,WAAd,eACA,kBAAC,EAAD,CAAUI,OAAQsB,S,GA1BRM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e60bb4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Righteous-Regular.77fa0099.ttf\";","import React, { Fragment } from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({ name, id, email }) => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"robo-cards\">\r\n        <img src={`https://robohash.org/${id}`} alt=\"robot1\" />\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Fragment } from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./Cardlist.css\";\r\n\r\nconst Cardlist = ({ robots }) => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"card-wrapper\">\r\n        {robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={robots[i].id}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Cardlist;\r\n","import React, { Fragment } from \"react\";\r\nimport \"./searchbox.css\";\r\n\r\nconst Searchbox = ({ makeChanges }) => {\r\n  return (\r\n    <Fragment>\r\n      <input type=\"search\" onChange={makeChanges} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Searchbox;\r\n","import React, { Fragment, Component } from \"react\";\r\nimport Cardlist from \"../components/Cardlist\";\r\nimport \"./app.css\";\r\nimport Searchbox from \"../components/searchbox\";\r\nimport \"./Righteous-Regular.ttf\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfilter: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ robots: users }));\r\n  }\r\n\r\n  makeChanges = e => {\r\n    this.setState({ searchfilter: e.target.value });\r\n  };\r\n  render() {\r\n    const { robots, searchfilter } = this.state;\r\n    const filteredRobots = robots.filter(robo => {\r\n      return robo.name.toLowerCase().includes(searchfilter.toLowerCase());\r\n    });\r\n    return !robots.length ? (\r\n      <Fragment>\r\n        <h1 className=\"loading\">Loading....</h1>\r\n        <Cardlist robots={filteredRobots} />\r\n      </Fragment>\r\n    ) : (\r\n      <Fragment>\r\n        <div className=\"heading\">\r\n          <h1>Fast Updating Cards on type</h1>\r\n          <Searchbox makeChanges={this.makeChanges} />\r\n        </div>\r\n        <Cardlist robots={filteredRobots} />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/app\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}